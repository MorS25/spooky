# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('___init__', [dirname(__file__)])
        except ImportError:
            import ___init__
            return ___init__
        if fp is not None:
            try:
                _mod = imp.load_module('___init__', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    ___init__ = swig_import_helper()
    del swig_import_helper
else:
    import ___init__
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fovX"] = ___init__.Camera_fovX_set
    __swig_getmethods__["fovX"] = ___init__.Camera_fovX_get
    if _newclass:
        fovX = _swig_property(___init__.Camera_fovX_get, ___init__.Camera_fovX_set)
    __swig_setmethods__["aspect"] = ___init__.Camera_aspect_set
    __swig_getmethods__["aspect"] = ___init__.Camera_aspect_get
    if _newclass:
        aspect = _swig_property(___init__.Camera_aspect_get, ___init__.Camera_aspect_set)
    __swig_setmethods__["position"] = ___init__.Camera_position_set
    __swig_getmethods__["position"] = ___init__.Camera_position_get
    if _newclass:
        position = _swig_property(___init__.Camera_position_get, ___init__.Camera_position_set)
    __swig_setmethods__["orientation"] = ___init__.Camera_orientation_set
    __swig_getmethods__["orientation"] = ___init__.Camera_orientation_get
    if _newclass:
        orientation = _swig_property(___init__.Camera_orientation_get, ___init__.Camera_orientation_set)

    def __init__(self):
        this = ___init__.new_Camera()
        try:
            self.this.append(this)
        except:
            self.this = this

    def setFovY(self, fovY):
        return ___init__.Camera_setFovY(self, fovY)

    def getFOVy(self):
        return ___init__.Camera_getFOVy(self)
    __swig_destroy__ = ___init__.delete_Camera
    __del__ = lambda self: None
Camera_swigregister = ___init__.Camera_swigregister
Camera_swigregister(Camera)

class RadianPi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadianPi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadianPi, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ZERO"] = ___init__.RadianPi_ZERO_set
    __swig_getmethods__["ZERO"] = ___init__.RadianPi_ZERO_get
    if _newclass:
        ZERO = _swig_property(___init__.RadianPi_ZERO_get, ___init__.RadianPi_ZERO_set)

    def __init__(self, r=0.0):
        this = ___init__.new_RadianPi(r)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valueRadians(self):
        return ___init__.RadianPi_valueRadians(self)

    def valueDegrees(self):
        return ___init__.RadianPi_valueDegrees(self)

    def __neg__(self):
        return ___init__.RadianPi___neg__(self)

    def __sub__(self, other):
        return ___init__.RadianPi___sub__(self, other)

    def __mul__(self, val):
        return ___init__.RadianPi___mul__(self, val)

    def __div__(self, val):
        return ___init__.RadianPi___div__(self, val)
    __swig_destroy__ = ___init__.delete_RadianPi
    __del__ = lambda self: None
RadianPi_swigregister = ___init__.RadianPi_swigregister
RadianPi_swigregister(RadianPi)
cvar = ___init__.cvar

class Radian2Pi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Radian2Pi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Radian2Pi, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ZERO"] = ___init__.Radian2Pi_ZERO_set
    __swig_getmethods__["ZERO"] = ___init__.Radian2Pi_ZERO_get
    if _newclass:
        ZERO = _swig_property(___init__.Radian2Pi_ZERO_get, ___init__.Radian2Pi_ZERO_set)

    def __init__(self, r=0.0):
        this = ___init__.new_Radian2Pi(r)
        try:
            self.this.append(this)
        except:
            self.this = this

    def valueRadians(self):
        return ___init__.Radian2Pi_valueRadians(self)

    def valueDegrees(self):
        return ___init__.Radian2Pi_valueDegrees(self)
    __swig_destroy__ = ___init__.delete_Radian2Pi
    __del__ = lambda self: None
Radian2Pi_swigregister = ___init__.Radian2Pi_swigregister
Radian2Pi_swigregister(Radian2Pi)


def cos(r):
    return ___init__.cos(r)
cos = ___init__.cos

def sin(r):
    return ___init__.sin(r)
sin = ___init__.sin

def tan(r):
    return ___init__.tan(r)
tan = ___init__.tan

def acos(r):
    return ___init__.acos(r)
acos = ___init__.acos

def asin(r):
    return ___init__.asin(r)
asin = ___init__.asin

def atan(r):
    return ___init__.atan(r)
atan = ___init__.atan
class Matrix3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = ___init__.new_Matrix3()
        try:
            self.this.append(this)
        except:
            self.this = this

    def at(self, i, j):
        return ___init__.Matrix3_at(self, i, j)

    def __call__(self, *args):
        return ___init__.Matrix3___call__(self, *args)

    def getColumn(self, j):
        return ___init__.Matrix3_getColumn(self, j)

    def getRow(self, i):
        return ___init__.Matrix3_getRow(self, i)

    def swapColumn(self, j, col):
        return ___init__.Matrix3_swapColumn(self, j, col)

    def swapRow(self, i, row):
        return ___init__.Matrix3_swapRow(self, i, row)

    def getDeterminant(self):
        return ___init__.Matrix3_getDeterminant(self)

    def __mul__(self, v):
        return ___init__.Matrix3___mul__(self, v)
    __swig_destroy__ = ___init__.delete_Matrix3
    __del__ = lambda self: None
Matrix3_swigregister = ___init__.Matrix3_swigregister
Matrix3_swigregister(Matrix3)

class Plane(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plane, name)
    __repr__ = _swig_repr

    def __init__(self, a, b, c, d):
        this = ___init__.new_Plane(a, b, c, d)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["createPlaneFromUnitNormal"] = lambda x: ___init__.Plane_createPlaneFromUnitNormal
    if _newclass:
        createPlaneFromUnitNormal = staticmethod(___init__.Plane_createPlaneFromUnitNormal)
    __swig_getmethods__["createPlaneFromNormal"] = lambda x: ___init__.Plane_createPlaneFromNormal
    if _newclass:
        createPlaneFromNormal = staticmethod(___init__.Plane_createPlaneFromNormal)
    __swig_getmethods__["createPlaneFromVectors"] = lambda x: ___init__.Plane_createPlaneFromVectors
    if _newclass:
        createPlaneFromVectors = staticmethod(___init__.Plane_createPlaneFromVectors)
    __swig_getmethods__["createPlaneFromTriangle"] = lambda x: ___init__.Plane_createPlaneFromTriangle
    if _newclass:
        createPlaneFromTriangle = staticmethod(___init__.Plane_createPlaneFromTriangle)

    def getNormal(self):
        return ___init__.Plane_getNormal(self)

    def getDistance(self, p):
        return ___init__.Plane_getDistance(self, p)

    def getValue(self, p):
        return ___init__.Plane_getValue(self, p)

    def getProjection(self, p):
        return ___init__.Plane_getProjection(self, p)

    def belongs(self, point):
        return ___init__.Plane_belongs(self, point)
    __swig_destroy__ = ___init__.delete_Plane
    __del__ = lambda self: None
Plane_swigregister = ___init__.Plane_swigregister
Plane_swigregister(Plane)

def Plane_createPlaneFromUnitNormal(normal, point):
    return ___init__.Plane_createPlaneFromUnitNormal(normal, point)
Plane_createPlaneFromUnitNormal = ___init__.Plane_createPlaneFromUnitNormal

def Plane_createPlaneFromNormal(normal, point):
    return ___init__.Plane_createPlaneFromNormal(normal, point)
Plane_createPlaneFromNormal = ___init__.Plane_createPlaneFromNormal

def Plane_createPlaneFromVectors(vec1, vec2, point):
    return ___init__.Plane_createPlaneFromVectors(vec1, vec2, point)
Plane_createPlaneFromVectors = ___init__.Plane_createPlaneFromVectors

def Plane_createPlaneFromTriangle(point1, point2, point3):
    return ___init__.Plane_createPlaneFromTriangle(point1, point2, point3)
Plane_createPlaneFromTriangle = ___init__.Plane_createPlaneFromTriangle

class ProjectionMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectionMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectionMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = ___init__.new_ProjectionMatrix(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setFieldOfView(self, *args):
        return ___init__.ProjectionMatrix_setFieldOfView(self, *args)

    def setPosition(self, p):
        return ___init__.ProjectionMatrix_setPosition(self, p)

    def setOrientation(self, q):
        return ___init__.ProjectionMatrix_setOrientation(self, q)

    def screenProjection(self, worldCoords):
        return ___init__.ProjectionMatrix_screenProjection(self, worldCoords)

    def getSx(self):
        return ___init__.ProjectionMatrix_getSx(self)

    def getSy(self):
        return ___init__.ProjectionMatrix_getSy(self)
    __swig_getmethods__["ComputeScale"] = lambda x: ___init__.ProjectionMatrix_ComputeScale
    if _newclass:
        ComputeScale = staticmethod(___init__.ProjectionMatrix_ComputeScale)
    __swig_getmethods__["GetVectorInCameraSpace"] = lambda x: ___init__.ProjectionMatrix_GetVectorInCameraSpace
    if _newclass:
        GetVectorInCameraSpace = staticmethod(___init__.ProjectionMatrix_GetVectorInCameraSpace)
    __swig_destroy__ = ___init__.delete_ProjectionMatrix
    __del__ = lambda self: None
ProjectionMatrix_swigregister = ___init__.ProjectionMatrix_swigregister
ProjectionMatrix_swigregister(ProjectionMatrix)

def ProjectionMatrix_ComputeScale(*args):
    return ___init__.ProjectionMatrix_ComputeScale(*args)
ProjectionMatrix_ComputeScale = ___init__.ProjectionMatrix_ComputeScale

def ProjectionMatrix_GetVectorInCameraSpace(*args):
    return ___init__.ProjectionMatrix_GetVectorInCameraSpace(*args)
ProjectionMatrix_GetVectorInCameraSpace = ___init__.ProjectionMatrix_GetVectorInCameraSpace

class Quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quaternion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = ___init__.new_Quaternion(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set(self, *args):
        return ___init__.Quaternion_set(self, *args)

    def FromAxes(self, xAxis, yAxis, zAxis):
        return ___init__.Quaternion_FromAxes(self, xAxis, yAxis, zAxis)

    def ToAxes(self, xAxis, yAxis, zAxis):
        return ___init__.Quaternion_ToAxes(self, xAxis, yAxis, zAxis)

    def FromRotationMatrix(self, mRot):
        return ___init__.Quaternion_FromRotationMatrix(self, mRot)

    def ToRotationMatrix(self, mRot):
        return ___init__.Quaternion_ToRotationMatrix(self, mRot)

    def xAxis(self):
        return ___init__.Quaternion_xAxis(self)

    def yAxis(self):
        return ___init__.Quaternion_yAxis(self)

    def zAxis(self):
        return ___init__.Quaternion_zAxis(self)

    def s(self, *args):
        return ___init__.Quaternion_s(self, *args)

    def v(self, *args):
        return ___init__.Quaternion_v(self, *args)

    def w(self):
        return ___init__.Quaternion_w(self)

    def x(self):
        return ___init__.Quaternion_x(self)

    def y(self):
        return ___init__.Quaternion_y(self)

    def z(self):
        return ___init__.Quaternion_z(self)

    def __mul__(self, *args):
        return ___init__.Quaternion___mul__(self, *args)

    def inverse(self):
        return ___init__.Quaternion_inverse(self)

    def norm2(self):
        return ___init__.Quaternion_norm2(self)

    def norm(self):
        return ___init__.Quaternion_norm(self)

    def dotProduct(self, q):
        return ___init__.Quaternion_dotProduct(self, q)
    __swig_destroy__ = ___init__.delete_Quaternion
    __del__ = lambda self: None
Quaternion_swigregister = ___init__.Quaternion_swigregister
Quaternion_swigregister(Quaternion)
Quaternion.ZERO = ___init__.cvar.Quaternion_ZERO
Quaternion.IDENTITY = ___init__.cvar.Quaternion_IDENTITY

class Vector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = ___init__.new_Vector2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def x(self):
        return ___init__.Vector2_x(self)

    def y(self):
        return ___init__.Vector2_y(self)

    def rotate90(self):
        return ___init__.Vector2_rotate90(self)

    def rotate180(self):
        return ___init__.Vector2_rotate180(self)

    def rotate270(self):
        return ___init__.Vector2_rotate270(self)

    def rotate(self, theta):
        return ___init__.Vector2_rotate(self, theta)

    def rotated90(self):
        return ___init__.Vector2_rotated90(self)

    def rotated180(self):
        return ___init__.Vector2_rotated180(self)

    def rotated270(self):
        return ___init__.Vector2_rotated270(self)
    __swig_destroy__ = ___init__.delete_Vector2
    __del__ = lambda self: None
Vector2_swigregister = ___init__.Vector2_swigregister
Vector2_swigregister(Vector2)

class Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ZERO"] = ___init__.Vector3_ZERO_set
    __swig_getmethods__["ZERO"] = ___init__.Vector3_ZERO_get
    if _newclass:
        ZERO = _swig_property(___init__.Vector3_ZERO_get, ___init__.Vector3_ZERO_set)
    __swig_setmethods__["UNIT_X"] = ___init__.Vector3_UNIT_X_set
    __swig_getmethods__["UNIT_X"] = ___init__.Vector3_UNIT_X_get
    if _newclass:
        UNIT_X = _swig_property(___init__.Vector3_UNIT_X_get, ___init__.Vector3_UNIT_X_set)
    __swig_setmethods__["UNIT_Y"] = ___init__.Vector3_UNIT_Y_set
    __swig_getmethods__["UNIT_Y"] = ___init__.Vector3_UNIT_Y_get
    if _newclass:
        UNIT_Y = _swig_property(___init__.Vector3_UNIT_Y_get, ___init__.Vector3_UNIT_Y_set)
    __swig_setmethods__["UNIT_Z"] = ___init__.Vector3_UNIT_Z_set
    __swig_getmethods__["UNIT_Z"] = ___init__.Vector3_UNIT_Z_get
    if _newclass:
        UNIT_Z = _swig_property(___init__.Vector3_UNIT_Z_get, ___init__.Vector3_UNIT_Z_set)

    def __init__(self, *args):
        this = ___init__.new_Vector3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def x(self):
        return ___init__.Vector3_x(self)

    def y(self):
        return ___init__.Vector3_y(self)

    def z(self):
        return ___init__.Vector3_z(self)

    def projectX(self):
        return ___init__.Vector3_projectX(self)

    def projectY(self):
        return ___init__.Vector3_projectY(self)

    def projectZ(self):
        return ___init__.Vector3_projectZ(self)

    def crossProduct(self, v):
        return ___init__.Vector3_crossProduct(self, v)

    def __xor__(self, v):
        return ___init__.Vector3___xor__(self, v)

    def perpendicular(self):
        return ___init__.Vector3_perpendicular(self)

    def directedAngle(self, vec, normal):
        return ___init__.Vector3_directedAngle(self, vec, normal)
    __swig_destroy__ = ___init__.delete_Vector3
    __del__ = lambda self: None
Vector3_swigregister = ___init__.Vector3_swigregister
Vector3_swigregister(Vector3)

class ToricManifold(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToricManifold, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ToricManifold, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = ___init__.new_ToricManifold(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["BuildFromAlpha"] = lambda x: ___init__.ToricManifold_BuildFromAlpha
    if _newclass:
        BuildFromAlpha = staticmethod(___init__.ToricManifold_BuildFromAlpha)

    def computePosition(self, theta, phi):
        return ___init__.ToricManifold_computePosition(self, theta, phi)

    def computeOrientation(self, position):
        return ___init__.ToricManifold_computeOrientation(self, position)

    def getAlpha(self):
        return ___init__.ToricManifold_getAlpha(self)

    def getPositionA(self):
        return ___init__.ToricManifold_getPositionA(self)

    def getPositionB(self):
        return ___init__.ToricManifold_getPositionB(self)

    def getZero(self):
        return ___init__.ToricManifold_getZero(self)

    def getMaxTheta(self):
        return ___init__.ToricManifold_getMaxTheta(self)

    def getMaximumDistanceToTargets(self):
        return ___init__.ToricManifold_getMaximumDistanceToTargets(self)

    def getDistance(self, point):
        return ___init__.ToricManifold_getDistance(self, point)

    def getThetasFromDistanceToA(self, d):
        return ___init__.ToricManifold_getThetasFromDistanceToA(self, d)

    def getThetasFromDistanceToB(self, d):
        return ___init__.ToricManifold_getThetasFromDistanceToB(self, d)

    def getPositionFromVantageToA(self, vectorFromA):
        return ___init__.ToricManifold_getPositionFromVantageToA(self, vectorFromA)

    def getPositionFromVantageToB(self, vectorFromB):
        return ___init__.ToricManifold_getPositionFromVantageToB(self, vectorFromB)

    def getPositionFromVantageToMiddleAB(self, vectorFromMiddle):
        return ___init__.ToricManifold_getPositionFromVantageToMiddleAB(self, vectorFromMiddle)

    def getThetaFromRatio(self, thetaRatio):
        return ___init__.ToricManifold_getThetaFromRatio(self, thetaRatio)
    __swig_destroy__ = ___init__.delete_ToricManifold
    __del__ = lambda self: None
ToricManifold_swigregister = ___init__.ToricManifold_swigregister
ToricManifold_swigregister(ToricManifold)

def ToricManifold_BuildFromAlpha(*args):
    return ___init__.ToricManifold_BuildFromAlpha(*args)
ToricManifold_BuildFromAlpha = ___init__.ToricManifold_BuildFromAlpha

class Toric2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Toric2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Toric2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = ___init__.new_Toric2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getTheta(self):
        return ___init__.Toric2_getTheta(self)

    def getPhi(self):
        return ___init__.Toric2_getPhi(self)
    __swig_destroy__ = ___init__.delete_Toric2
    __del__ = lambda self: None
Toric2_swigregister = ___init__.Toric2_swigregister
Toric2_swigregister(Toric2)

class Toric3(Toric2):
    __swig_setmethods__ = {}
    for _s in [Toric2]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Toric3, name, value)
    __swig_getmethods__ = {}
    for _s in [Toric2]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Toric3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = ___init__.new_Toric3(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getAlpha(self):
        return ___init__.Toric3_getAlpha(self)

    def setTheta(self, theta):
        return ___init__.Toric3_setTheta(self, theta)

    def setPhi(self, phi):
        return ___init__.Toric3_setPhi(self, phi)

    def setAlpha(self, alpha):
        return ___init__.Toric3_setAlpha(self, alpha)

    def getThetaRatio(self):
        return ___init__.Toric3_getThetaRatio(self)

    def set(self, alpha, theta, phi):
        return ___init__.Toric3_set(self, alpha, theta, phi)

    def __eq__(self, t):
        return ___init__.Toric3___eq__(self, t)

    def __ne__(self, t):
        return ___init__.Toric3___ne__(self, t)
    __swig_getmethods__["FromWorldPosition"] = lambda x: ___init__.Toric3_FromWorldPosition
    if _newclass:
        FromWorldPosition = staticmethod(___init__.Toric3_FromWorldPosition)
    __swig_getmethods__["ToWorldPosition"] = lambda x: ___init__.Toric3_ToWorldPosition
    if _newclass:
        ToWorldPosition = staticmethod(___init__.Toric3_ToWorldPosition)
    __swig_getmethods__["ComputeThetaRatio"] = lambda x: ___init__.Toric3_ComputeThetaRatio
    if _newclass:
        ComputeThetaRatio = staticmethod(___init__.Toric3_ComputeThetaRatio)
    __swig_getmethods__["ComputeTheta"] = lambda x: ___init__.Toric3_ComputeTheta
    if _newclass:
        ComputeTheta = staticmethod(___init__.Toric3_ComputeTheta)
    __swig_getmethods__["Scale"] = lambda x: ___init__.Toric3_Scale
    if _newclass:
        Scale = staticmethod(___init__.Toric3_Scale)
    __swig_getmethods__["ComputeOrientationForOneTarget"] = lambda x: ___init__.Toric3_ComputeOrientationForOneTarget
    if _newclass:
        ComputeOrientationForOneTarget = staticmethod(___init__.Toric3_ComputeOrientationForOneTarget)
    __swig_getmethods__["ComputeOrientationForTwoTargets"] = lambda x: ___init__.Toric3_ComputeOrientationForTwoTargets
    if _newclass:
        ComputeOrientationForTwoTargets = staticmethod(___init__.Toric3_ComputeOrientationForTwoTargets)

    def _getBeta(self):
        return ___init__.Toric3__getBeta(self)
    __swig_getmethods__["_ComputeOrientationForOneTarget"] = lambda x: ___init__.Toric3__ComputeOrientationForOneTarget
    if _newclass:
        _ComputeOrientationForOneTarget = staticmethod(___init__.Toric3__ComputeOrientationForOneTarget)
    __swig_getmethods__["_ComputeOrientationForTwoTargets"] = lambda x: ___init__.Toric3__ComputeOrientationForTwoTargets
    if _newclass:
        _ComputeOrientationForTwoTargets = staticmethod(___init__.Toric3__ComputeOrientationForTwoTargets)
    __swig_destroy__ = ___init__.delete_Toric3
    __del__ = lambda self: None
Toric3_swigregister = ___init__.Toric3_swigregister
Toric3_swigregister(Toric3)

def Toric3_FromWorldPosition(*args):
    return ___init__.Toric3_FromWorldPosition(*args)
Toric3_FromWorldPosition = ___init__.Toric3_FromWorldPosition

def Toric3_ToWorldPosition(*args):
    return ___init__.Toric3_ToWorldPosition(*args)
Toric3_ToWorldPosition = ___init__.Toric3_ToWorldPosition

def Toric3_ComputeThetaRatio(theta, alpha):
    return ___init__.Toric3_ComputeThetaRatio(theta, alpha)
Toric3_ComputeThetaRatio = ___init__.Toric3_ComputeThetaRatio

def Toric3_ComputeTheta(thetaRatio, alpha):
    return ___init__.Toric3_ComputeTheta(thetaRatio, alpha)
Toric3_ComputeTheta = ___init__.Toric3_ComputeTheta

def Toric3_Scale(reference, new_alpha):
    return ___init__.Toric3_Scale(reference, new_alpha)
Toric3_Scale = ___init__.Toric3_Scale

def Toric3_ComputeOrientationForOneTarget(campos, spos, wpos, fovX, fovY):
    return ___init__.Toric3_ComputeOrientationForOneTarget(campos, spos, wpos, fovX, fovY)
Toric3_ComputeOrientationForOneTarget = ___init__.Toric3_ComputeOrientationForOneTarget

def Toric3_ComputeOrientationForTwoTargets(campos, sposA, sposB, wposA, wposB, fovX, fovY):
    return ___init__.Toric3_ComputeOrientationForTwoTargets(campos, sposA, sposB, wposA, wposB, fovX, fovY)
Toric3_ComputeOrientationForTwoTargets = ___init__.Toric3_ComputeOrientationForTwoTargets

def Toric3__ComputeOrientationForOneTarget(*args):
    return ___init__.Toric3__ComputeOrientationForOneTarget(*args)
Toric3__ComputeOrientationForOneTarget = ___init__.Toric3__ComputeOrientationForOneTarget

def Toric3__ComputeOrientationForTwoTargets(*args):
    return ___init__.Toric3__ComputeOrientationForTwoTargets(*args)
Toric3__ComputeOrientationForTwoTargets = ___init__.Toric3__ComputeOrientationForTwoTargets


def ComputeDistanceToA(AB, alpha, theta):
    return ___init__.ComputeDistanceToA(AB, alpha, theta)
ComputeDistanceToA = ___init__.ComputeDistanceToA
class ToricInterpolationInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToricInterpolationInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ToricInterpolationInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["startVector"] = ___init__.ToricInterpolationInfo_startVector_set
    __swig_getmethods__["startVector"] = ___init__.ToricInterpolationInfo_startVector_get
    if _newclass:
        startVector = _swig_property(___init__.ToricInterpolationInfo_startVector_get, ___init__.ToricInterpolationInfo_startVector_set)
    __swig_setmethods__["viewAngleChange"] = ___init__.ToricInterpolationInfo_viewAngleChange_set
    __swig_getmethods__["viewAngleChange"] = ___init__.ToricInterpolationInfo_viewAngleChange_get
    if _newclass:
        viewAngleChange = _swig_property(___init__.ToricInterpolationInfo_viewAngleChange_get, ___init__.ToricInterpolationInfo_viewAngleChange_set)
    __swig_setmethods__["viewHeightChange"] = ___init__.ToricInterpolationInfo_viewHeightChange_set
    __swig_getmethods__["viewHeightChange"] = ___init__.ToricInterpolationInfo_viewHeightChange_get
    if _newclass:
        viewHeightChange = _swig_property(___init__.ToricInterpolationInfo_viewHeightChange_get, ___init__.ToricInterpolationInfo_viewHeightChange_set)
    __swig_setmethods__["distance"] = ___init__.ToricInterpolationInfo_distance_set
    __swig_getmethods__["distance"] = ___init__.ToricInterpolationInfo_distance_get
    if _newclass:
        distance = _swig_property(___init__.ToricInterpolationInfo_distance_get, ___init__.ToricInterpolationInfo_distance_set)

    def __init__(self):
        this = ___init__.new_ToricInterpolationInfo()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = ___init__.delete_ToricInterpolationInfo
    __del__ = lambda self: None
ToricInterpolationInfo_swigregister = ___init__.ToricInterpolationInfo_swigregister
ToricInterpolationInfo_swigregister(ToricInterpolationInfo)

class ToricInterpolator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToricInterpolator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ToricInterpolator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = ___init__.new_ToricInterpolator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def init(self, wposA, wposB, t1, t2):
        return ___init__.ToricInterpolator_init(self, wposA, wposB, t1, t2)

    def interpolateVector(self, t, pOutVecA, pOutVecB):
        return ___init__.ToricInterpolator_interpolateVector(self, t, pOutVecA, pOutVecB)

    def interpolate(self, t):
        return ___init__.ToricInterpolator_interpolate(self, t)
    __swig_destroy__ = ___init__.delete_ToricInterpolator
    __del__ = lambda self: None
ToricInterpolator_swigregister = ___init__.ToricInterpolator_swigregister
ToricInterpolator_swigregister(ToricInterpolator)

# This file is compatible with both classic and new-style classes.


